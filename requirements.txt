The way that we were able to successfully run Retinexformer involved reflashing the Jetson with a prebuilt image with Ubuntu 20.04 installed. Please consider backing up your files somewhere besides the Jetson or manually upgrade to Ubuntu 20.04. This also does not use conda. 

Last tested February 5th, 2025

You can follow these steps or run the bash file included in this repo. Run at your own risk and make sure to back up any important files

Steps to run Retinexformer on Jetson Nano:
1. Download the prebuilt image from this github: https://github.com/Qengineering/Jetson-Nano-Ubuntu-20-image
	- I downloaded the split image and re-zipped it using 7za on macOS and the command: 
	7za x JetsonNanoUb_3b.img.xz.001
2. Flash the image onto your >=64GB SD card using BalenaEtcher or method of choice
	- The image comes with pre-installed Python 3.8 and many ML libraries
3. Run gparted and extend the application memory to fill your entire card.
4. Install PyTorch 1.11.0 using this tutorial: https://qengineering.eu/install-pytorch-on-jetson-nano.html
5. Install the matching torchvision wheel (0.12.0) using this tutorial: https://qengineering.eu/install-pytorch-on-jetson-nano.html
6. Increase the swap space to 10GB using the following commands:
7. Uninstall the pre-installed version of OpenCV using pip3 uninstall python3-opencv
8. Install OpenCV 4.11.0 using this tutorial: https://qengineering.eu/install-opencv-on-jetson-nano.html
	- Using the dphys-swapfile did not work for me
	- I edited the script to get rid of 74something because this is not supported by Ubuntu 20.04.
9. Add OPENBLAS_CORETYPE=ARMV8 to the end of /etc/... This makes it so that you do not need to export OPENBLAS_CORETYPE=ARMV8 every time you run Python scripts.
10. git pull the Retinexformer github, and install BasicSR with this command:
11. Download your desired dataset and organize it as specified by Retinexformer
12. Run test script. 
