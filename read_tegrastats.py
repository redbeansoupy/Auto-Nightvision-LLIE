# Run this to get averages the output generated by tegrastats
# This is meant to be used in the test bash scripts provided, but could be used with any raw tegrastats logs

import sys
import csv

CPU_CORES = 4

def parse_cpu_usage(cpu_str: str):
    usage = []
    freq = []
    str_buffer = ""
    for char in cpu_str:
        if char.isdigit(): str_buffer += char
        elif char == "%":
            usage.append(int(str_buffer))
            str_buffer = ""
        elif char == "," or char == "]":
            freq.append(int(str_buffer))
            str_buffer = ""
    return usage, freq

# Validate arguments
if (len(sys.argv) < 2) or (len(sys.argv) > 3):
    print("Usage: python3 read_tegrastats.py <tegrastats pretest log file name (Optional)> [performance test log file name]")

# Variables
ram_pretest = 0
swap_pretest = 0
cpu_pretest = [0] * CPU_CORES
gpu_pretest = 0

ram_avg = 0
ram_max = 0
swap_avg = 0
cpu_avg = [0] * CPU_CORES
cpu_freq = [0] * CPU_CORES
gpu_avg = 0
# gpu_freq = 0 # Not on Jetson Nano
# VDD stat is not available on jetson :(

for file_idx in range(1, len(sys.argv), 1):
    with open(sys.argv[file_idx], "r") as file:
        lines = file.readlines()

        max_lines = 60 * 20 # Basically, just record last 2 minutes (steady state)
        start = max(len(lines) - max_lines, 0)
        num_lines = len(lines) - start
        for idx in range(start, len(lines)):
            line = lines[idx]
            line = line.split(" ")
            ram_idx = line.index("RAM") + 1
            swap_idx = line.index("SWAP") + 1
            cpu_idx = line.index("CPU") + 1
            # tegrastats output is like CPU [X%@Z,Y%@Z,...] 
            gpu_idx = line.index("GR3D_FREQ") + 1

            # RAM
            ram_usage = line[ram_idx].split("/")
            ram_avg += int(ram_usage[0])
            if idx == 0: ram_max = int(ram_usage[1][:-2])

            # SWAP
            swap_usage = line[swap_idx].split("/")
            swap_avg += int(swap_usage[0])

            # CPU
            cpu_usage, frequencies = parse_cpu_usage(line[cpu_idx]) 
            for core_idx in range(CPU_CORES):
                cpu_avg[core_idx] += cpu_usage[core_idx]
                if idx == 0: cpu_freq[core_idx] = frequencies[core_idx]
                
            # GPU
            gpu_avg += int(line[gpu_idx][:-1])

        # Calculate averages
        ram_avg /= num_lines
        swap_avg /= num_lines
        cpu_avg = [i / num_lines for i in cpu_avg]
        gpu_avg /= num_lines
	
    # Output
    if len(sys.argv) == 3 and file_idx == 1:
    	# save for later
        ram_pretest = ram_avg
        swap_pretest = swap_avg
        cpu_pretest = cpu_avg.copy()
        gpu_pretest = gpu_avg
        print("========== v PRETEST TEGRASTATS v ==========")
    elif len(sys.argv) == 3 and file_idx == 2:
        print("========== v MAIN TEST TEGRASTATS v ==========")
    else:
        print("========== AVG TEGRASTATS ==========")
    
    print(f"Average RAM usage: {ram_avg:.2f}/{ram_max}MB")
    print(f"Average Swap usage: {swap_avg:.2f}MB")
    print(f"Average CPU usage: [", end="")
    for core in range(CPU_CORES):
        print(f"{cpu_avg[core]:.2f}%/{cpu_freq[core]}", end="")
        if core == CPU_CORES - 1: # If last
            print("]")
        else:
            print(", ", end="")
    print(f"Average GPU usage: {gpu_avg:.2f}%")

if len(sys.argv) == 3:
    print("========== PRETEST SUBTRACTED =========")
    print(f"Average RAM usage: {(ram_avg - ram_pretest):.2f}/{ram_max}MB")
    print(f"Average Swap usage: {(swap_avg - swap_pretest):.2f}MB")
    print(f"Average CPU usage: [", end="")
    for core in range(CPU_CORES):
        print(f"{(cpu_avg[core] - cpu_pretest[core]):.2f}%", end="")
        if core == CPU_CORES - 1: # If last
            print("]")
        else:
            print(", ", end="")
    print(f"Average GPU usage: {(gpu_avg - gpu_pretest):.2f}%")

# filename, ram, swap, gpu
data = [sys.argv[1], ram_avg, swap_avg, gpu_avg]
with open("/Users/victorialam/Documents/Class/Auto-Nightvision-LLIE/goober.csv", mode='a', newline='') as file:
    w = csv.writer(file)
    w.writerow(data)