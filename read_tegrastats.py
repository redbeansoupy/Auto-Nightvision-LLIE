# Run this to read the files generated by test bash script

import sys

CPU_CORES = 4

def parse_cpu_usage(cpu_str: str) -> list:
    numbers = [0, 0]
    str_buffer = ""
    for char in cpu_str:
        if char.isdigit(): str_buffer += char
        elif char == "@":
            numbers[0] = int(str_buffer)
            str_buffer = ""
    numbers[1] = int(str_buffer)
    return numbers

# Validate arguments
if (len(sys.argv) < 2) or (len(sys.argv) > 3):
    print("Usage: python3 read_tegrastats.py <tegrastats pretest log file name> [performance test log file name]")

for file_idx in range(1, len(sys.argv), 1):
    ram_avg = 0
    ram_max = 0
    cpu_avg = [0] * CPU_CORES
    cpu_freq = [0] * CPU_CORES
    gpu_avg = 0
    gpu_freq = 0
    # VDD? 

    with open(sys.argv[file_idx], "r") as file:
        lines = file.readlines()
        num_lines = len(lines)
        for idx in range(num_lines):
            line = lines[idx]
            line = line.split(" ")
            ram_idx = line.index("RAM") + 1
            cpu_idx = line.index("CPU") + 1
            # My tegrastats output is like CPU [X%@Z, Y%@Z,...] 
            gpu_idx = line.index("GR3D") + 1

            # RAM
            ram_usage = line[ram_idx].split("/")
            ram_avg += int(ram_usage[0])
            if idx == 0: ram_max = int(ram_usage[1])

            # CPU
            for core_idx in range(CPU_CORES):
                # Depends on if cpu usage is listed with spaces TT
                cpu_usage = parse_cpu_usage(line[cpu_idx + core_idx])
                cpu_avg[core_idx] += cpu_usage[0]
                if idx == 0: cpu_freq[core_idx] = cpu_usage[1]

            # GPU
            gpu_usage = parse_cpu_usage(line[gpu_idx])
            gpu_avg += gpu_usage[0]
            if idx == 0: gpu_freq = gpu_usage[1]

        # Calculate averages
        ram_avg /= num_lines
        cpu_avg = [i / num_lines for i in cpu_avg]
        gpu_avg /= num_lines

    # Output
    if len(sys.argv) == 3 and file_idx == 1:
        print("========== v PRETEST TEGRASTATS v ==========")
    elif len(sys.argv) == 3 and file_idx == 2:
        print("========== v MAIN TEST TEGRASTATS v ==========")
    else:
        print("========== AVG TEGRASTATS ==========")
    
    print(f"Average RAM usage: {ram_avg}/{ram_max}")
    print(f"Average CPU usage: [", endl="")
    for core in range(CPU_CORES):
        print(f"{cpu_avg[core]}%/{cpu_freq[core]}", endl="")
        if core == CPU_CORES - 1: # If last
            print("]")
        else:
            print(", ", endl="")
    print(f"Average GPU usage: {gpu_avg}%@{gpu_freq}")
